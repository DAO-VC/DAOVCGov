/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestERC20,
  TestERC20Interface,
} from "../../../contracts/mock/TestERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "wad",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000acf38038062000acf83398101604081905262000034916200020f565b825162000049906000906020860190620000b2565b5081516200005f906001906020850190620000b2565b506002819055336000818152600360209081526040808320859055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050620002d5565b828054620000c09062000282565b90600052602060002090601f016020900481019282620000e457600085556200012f565b82601f10620000ff57805160ff19168380011785556200012f565b828001600101855582156200012f579182015b828111156200012f57825182559160200191906001019062000112565b506200013d92915062000141565b5090565b5b808211156200013d576000815560010162000142565b600082601f8301126200016a57600080fd5b81516001600160401b0380821115620001875762000187620002bf565b604051601f8301601f19908116603f01168101908282118183101715620001b257620001b2620002bf565b81604052838152602092508683858801011115620001cf57600080fd5b600091505b83821015620001f35785820183015181830184015290820190620001d4565b83821115620002055760008385830101525b9695505050505050565b6000806000606084860312156200022557600080fd5b83516001600160401b03808211156200023d57600080fd5b6200024b8783880162000158565b945060208601519150808211156200026257600080fd5b50620002718682870162000158565b925050604084015190509250925092565b600181811c908216806200029757607f821691505b60208210811415620002b957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6107ea80620002e56000396000f3fe6080604052600436106100a05760003560e01c8063313ce56711610064578063313ce5671461017357806370a082311461019a57806395d89b41146101c7578063a9059cbb146101dc578063d0e30db0146101fc578063dd62ed3e1461020457600080fd5b806306fdde03146100b4578063095ea7b3146100df57806318160ddd1461010f57806323b872dd146101335780632e1a7d4d1461015357600080fd5b366100af576100ad61023c565b005b600080fd5b3480156100c057600080fd5b506100c9610297565b6040516100d691906106df565b60405180910390f35b3480156100eb57600080fd5b506100ff6100fa36600461069c565b610325565b60405190151581526020016100d6565b34801561011b57600080fd5b5061012560025481565b6040519081526020016100d6565b34801561013f57600080fd5b506100ff61014e366004610660565b610391565b34801561015f57600080fd5b506100ad61016e3660046106c6565b6104a9565b34801561017f57600080fd5b50610188601281565b60405160ff90911681526020016100d6565b3480156101a657600080fd5b506101256101b536600461060b565b60036020526000908152604090205481565b3480156101d357600080fd5b506100c9610552565b3480156101e857600080fd5b506100ff6101f736600461069c565b61055f565b6100ad61023c565b34801561021057600080fd5b5061012561021f36600461062d565b600460209081526000928352604080842090915290825290205481565b336000908152600360205260408120805434929061025b908490610734565b909155505060405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a2565b600080546102a490610763565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610763565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103809086815260200190565b60405180910390a350600192915050565b6001600160a01b0383166000908152600460209081526040808320338452909152812054600019146103f6576001600160a01b0384166000908152600460209081526040808320338452909152812080548492906103f090849061074c565b90915550505b6001600160a01b0384166000908152600360205260408120805484929061041e90849061074c565b90915550506001600160a01b0383166000908152600360205260408120805484929061044b908490610734565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161049791815260200190565b60405180910390a35060019392505050565b336000908152600360205260409020548111156104c557600080fd5b33600090815260036020526040812080548392906104e490849061074c565b90915550506040513390819083156108fc029084906000818181858888f19350505050158015610518573d6000803e3d6000fd5b5060405182815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b659060200160405180910390a25050565b600180546102a490610763565b3360009081526003602052604081208054839190839061058090849061074c565b90915550506001600160a01b038316600090815260036020526040812080548492906105ad908490610734565b90915550506040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610380565b80356001600160a01b038116811461060657600080fd5b919050565b60006020828403121561061d57600080fd5b610626826105ef565b9392505050565b6000806040838503121561064057600080fd5b610649836105ef565b9150610657602084016105ef565b90509250929050565b60008060006060848603121561067557600080fd5b61067e846105ef565b925061068c602085016105ef565b9150604084013590509250925092565b600080604083850312156106af57600080fd5b6106b8836105ef565b946020939093013593505050565b6000602082840312156106d857600080fd5b5035919050565b600060208083528351808285015260005b8181101561070c578581018301518582016040015282016106f0565b8181111561071e576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156107475761074761079e565b500190565b60008282101561075e5761075e61079e565b500390565b600181811c9082168061077757607f821691505b6020821081141561079857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212200f76443c9cb9d9bab65f80b02f69e699b3cdf4a334702a57113edc33103d910164736f6c63430008070033";

type TestERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestERC20__factory extends ContractFactory {
  constructor(...args: TestERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestERC20> {
    return super.deploy(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    ) as Promise<TestERC20>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _totalSupply,
      overrides || {}
    );
  }
  override attach(address: string): TestERC20 {
    return super.attach(address) as TestERC20;
  }
  override connect(signer: Signer): TestERC20__factory {
    return super.connect(signer) as TestERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestERC20Interface {
    return new utils.Interface(_abi) as TestERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestERC20;
  }
}
