/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IbaalInterface extends ethers.utils.Interface {
  functions: {
    "isManager(address)": FunctionFragment;
    "mintLoot(address[],uint256[])": FunctionFragment;
    "shamans(address)": FunctionFragment;
    "target()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mintLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "shamans", values: [string]): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;

  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shamans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;

  events: {};
}

export class Ibaal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IbaalInterface;

  functions: {
    isManager(
      shaman: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "isManager(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shamans(
      shaman: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "shamans(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    target(overrides?: Overrides): Promise<ContractTransaction>;

    "target()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  isManager(
    shaman: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "isManager(address)"(
    shaman: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintLoot(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintLoot(address[],uint256[])"(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shamans(shaman: string, overrides?: Overrides): Promise<ContractTransaction>;

  "shamans(address)"(
    shaman: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  target(overrides?: Overrides): Promise<ContractTransaction>;

  "target()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    isManager(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    "isManager(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    shamans(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shamans(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<string>;

    "target()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    isManager(shaman: string, overrides?: Overrides): Promise<BigNumber>;

    "isManager(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    shamans(shaman: string, overrides?: Overrides): Promise<BigNumber>;

    "shamans(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    target(overrides?: Overrides): Promise<BigNumber>;

    "target()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isManager(
      shaman: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "isManager(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shamans(
      shaman: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "shamans(address)"(
      shaman: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: Overrides): Promise<PopulatedTransaction>;

    "target()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
