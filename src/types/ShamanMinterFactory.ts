/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ShamanMinter } from "./ShamanMinter";

export class ShamanMinterFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ShamanMinter> {
    return super.deploy(overrides || {}) as Promise<ShamanMinter>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ShamanMinter {
    return super.attach(address) as ShamanMinter;
  }
  connect(signer: Signer): ShamanMinterFactory {
    return super.connect(signer) as ShamanMinterFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShamanMinter {
    return new Contract(address, _abi, signerOrProvider) as ShamanMinter;
  }
}

const _abi = [
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract Baal",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "members",
        type: "address[]",
      },
    ],
    name: "doubler",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_baal",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610416806100206000396000f3fe6080604052600436106100345760003560e01c806319ab453c14610039578063348624e614610085578063e5a2a2a514610098575b600080fd5b34801561004557600080fd5b5061008361005436600461023d565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b005b610083610093366004610261565b6100d4565b3480156100a457600080fd5b506000546100b8906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b606060005b828110156101d1576000546001600160a01b03166370a08231858584818110610104576101046103b2565b9050602002016020810190610119919061023d565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561015857600080fd5b505afa15801561016c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019091906102d6565b8282815181106101a2576101a26103b2565b6bffffffffffffffffffffffff90921660209283029190910190910152806101c981610389565b9150506100d9565b50600054604051630bcd118960e01b81526001600160a01b0390911690630bcd118990610206908690869086906004016102ef565b600060405180830381600087803b15801561022057600080fd5b505af1158015610234573d6000803e3d6000fd5b50505050505050565b60006020828403121561024f57600080fd5b813561025a816103c8565b9392505050565b6000806020838503121561027457600080fd5b823567ffffffffffffffff8082111561028c57600080fd5b818501915085601f8301126102a057600080fd5b8135818111156102af57600080fd5b8660208260051b85010111156102c457600080fd5b60209290920196919550909350505050565b6000602082840312156102e857600080fd5b5051919050565b6040808252810183905260008460608301825b86811015610332578235610315816103c8565b6001600160a01b0316825260209283019290910190600101610302565b5060209150838103828501528085518083528383019150838701925060005b8181101561037b5783516bffffffffffffffffffffffff1683529284019291840191600101610351565b509098975050505050505050565b60006000198214156103ab57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03811681146103dd57600080fd5b5056fea2646970667358221220d7147f633aba60293fad86b3123913f7184099ed4b9a9d3f33cf431ffb2bd29264736f6c63430008070033";
