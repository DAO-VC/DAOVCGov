/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ShamanMinter } from "./ShamanMinter";

export class ShamanMinterFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ShamanMinter> {
    return super.deploy(overrides || {}) as Promise<ShamanMinter>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ShamanMinter {
    return super.attach(address) as ShamanMinter;
  }
  connect(signer: Signer): ShamanMinterFactory {
    return super.connect(signer) as ShamanMinterFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ShamanMinter {
    return new Contract(address, _abi, signerOrProvider) as ShamanMinter;
  }
}

const _abi = [
  {
    inputs: [],
    name: "baal",
    outputs: [
      {
        internalType: "contract Baal",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "members",
        type: "address[]",
      },
    ],
    name: "doubler",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_baal",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sharesToken",
    outputs: [
      {
        internalType: "contract IBaalToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061051e806100206000396000f3fe60806040526004361061003f5760003560e01c806319ab453c14610044578063348624e6146100665780638009ba1f14610079578063e5a2a2a5146100b5575b600080fd5b34801561005057600080fd5b5061006461005f366004610320565b6100d5565b005b610064610074366004610344565b610184565b34801561008557600080fd5b50600154610099906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c157600080fd5b50600054610099906001600160a01b031681565b600080546001600160a01b0319166001600160a01b03831690811790915560408051638009ba1f60e01b81529051638009ba1f91600480820192602092909190829003018186803b15801561012957600080fd5b505afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016191906103b9565b600180546001600160a01b0319166001600160a01b039290921691909117905550565b60008167ffffffffffffffff81111561019f5761019f6104ba565b6040519080825280602002602001820160405280156101c8578160200160208202803683370190505b50905060005b828110156102b4576001546001600160a01b03166370a082318585848181106101f9576101f96104a4565b905060200201602081019061020e9190610320565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561024d57600080fd5b505afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028591906103d6565b828281518110610297576102976104a4565b6020908102919091010152806102ac8161047b565b9150506101ce565b50600054604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c906102e9908690869086906004016103ef565b600060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b50505050505050565b60006020828403121561033257600080fd5b813561033d816104d0565b9392505050565b6000806020838503121561035757600080fd5b823567ffffffffffffffff8082111561036f57600080fd5b818501915085601f83011261038357600080fd5b81358181111561039257600080fd5b8660208260051b85010111156103a757600080fd5b60209290920196919550909350505050565b6000602082840312156103cb57600080fd5b815161033d816104d0565b6000602082840312156103e857600080fd5b5051919050565b6040808252810183905260008460608301825b86811015610432578235610415816104d0565b6001600160a01b0316825260209283019290910190600101610402565b5060209150838103828501528085518083528383019150838701925060005b8181101561046d57835183529284019291840191600101610451565b509098975050505050505050565b600060001982141561049d57634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146104e557600080fd5b5056fea264697066735822122044bf8dff29a41577747723502ee13358a0169a62a5fe1636c4669e9fec88288264736f6c63430008070033";
