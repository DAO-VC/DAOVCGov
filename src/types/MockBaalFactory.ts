/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockBaal } from "./MockBaal";

export class MockBaalFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _lootSingleton: string,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): Promise<MockBaal> {
    return super.deploy(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    ) as Promise<MockBaal>;
  }
  getDeployTransaction(
    _lootSingleton: string,
    _name: string,
    _symbol: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _lootSingleton,
      _name,
      _symbol,
      overrides || {}
    );
  }
  attach(address: string): MockBaal {
    return super.attach(address) as MockBaal;
  }
  connect(signer: Signer): MockBaalFactory {
    return super.connect(signer) as MockBaalFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaal {
    return new Contract(address, _abi, signerOrProvider) as MockBaal;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_lootSingleton",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "burnLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lootPaused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lootToken",
    outputs: [
      {
        internalType: "contract IBaalToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintLoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "paused",
        type: "bool",
      },
    ],
    name: "setLootPaused",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105a53803806105a583398101604081905261002f916101e4565b61003883610102565b60008054610100600160a81b0319166101006001600160a01b039384168102919091179182905560405191049091169063562d190d9061007c908590602001610292565b6040516020818303038152906040528360405160200161009c91906102bb565b6040516020818303038152906040526040518363ffffffff1660e01b81526004016100c89291906102e4565b600060405180830381600087803b1580156100e257600080fd5b505af11580156100f6573d6000803e3d6000fd5b50505050505050610358565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b600082601f83011261016e57600080fd5b81516001600160401b038082111561018857610188610342565b604051601f8301601f19908116603f011681019082821181831017156101b0576101b0610342565b816040528381528660208588010111156101c957600080fd5b6101da846020830160208901610312565b9695505050505050565b6000806000606084860312156101f957600080fd5b83516001600160a01b038116811461021057600080fd5b60208501519093506001600160401b038082111561022d57600080fd5b6102398783880161015d565b9350604086015191508082111561024f57600080fd5b5061025c8682870161015d565b9150509250925092565b6000815180845261027e816020860160208601610312565b601f01601f19169290920160200192915050565b600082516102a4818460208701610312565b64081313d3d560da1b920191825250600501919050565b600082516102cd818460208701610312565b640b5313d3d560da1b920191825250600501919050565b6040815260006102f76040830185610266565b82810360208401526103098185610266565b95945050505050565b60005b8381101561032d578181015183820152602001610315565b8381111561033c576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b61023e806103676000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630ac419b21461005c5780632cdc48fc1461007e57806359cb2f06146100a15780639bceb7f1146100b4578063f460124d146100c7575b600080fd5b6000546100699060ff1681565b60405190151581526020015b60405180910390f35b61009f61008c3660046101df565b6000805460ff1916911515919091179055565b005b61009f6100af3660046101a7565b6100f7565b61009f6100c23660046101a7565b610168565b6000546100df9061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610075565b6000546040516340c10f1960e01b81526001600160a01b03848116600483015260248201849052610100909204909116906340c10f19906044015b600060405180830381600087803b15801561014c57600080fd5b505af1158015610160573d6000803e3d6000fd5b505050505050565b600054604051632770a7eb60e21b81526001600160a01b0384811660048301526024820184905261010090920490911690639dc29fac90604401610132565b600080604083850312156101ba57600080fd5b82356001600160a01b03811681146101d157600080fd5b946020939093013593505050565b6000602082840312156101f157600080fd5b8135801515811461020157600080fd5b939250505056fea2646970667358221220600444f0d56224bc9a1b21a9eaa67e4b38d82943f84286de69c3813934fe337464736f6c63430008070033";
