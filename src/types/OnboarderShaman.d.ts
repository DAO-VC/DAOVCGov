/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OnboarderShamanInterface extends ethers.utils.Interface {
  functions: {
    "baal()": FunctionFragment;
    "balance()": FunctionFragment;
    "deposits(address)": FunctionFragment;
    "init(address,address,uint256,bool,uint256,uint256)": FunctionFragment;
    "initTemplate()": FunctionFragment;
    "initialized()": FunctionFragment;
    "lootPerUnit()": FunctionFragment;
    "onboarder()": FunctionFragment;
    "onboarder20(uint256)": FunctionFragment;
    "onlyERC20()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "pricePerUnit()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "baal", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposits", values: [string]): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initTemplate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootPerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "onboarder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onboarder20",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "onlyERC20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerUnit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initTemplate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lootPerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onboarder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onboarder20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onlyERC20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "YeetReceived(address,uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "YeetReceived"): EventFragment;
}

export class OnboarderShaman extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OnboarderShamanInterface;

  functions: {
    baal(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "baal()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    balance(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "balance()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    init(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,uint256,bool,uint256,uint256)"(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initTemplate(overrides?: Overrides): Promise<ContractTransaction>;

    "initTemplate()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "initialized()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lootPerUnit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "lootPerUnit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    onboarder(overrides?: PayableOverrides): Promise<ContractTransaction>;

    "onboarder()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

    onboarder20(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onboarder20(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onlyERC20(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "onlyERC20()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    platformFee(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "platformFee()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    pricePerUnit(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "pricePerUnit()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    token(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "token()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  baal(overrides?: CallOverrides): Promise<string>;

  "baal()"(overrides?: CallOverrides): Promise<string>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "deposits(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _baal: string,
    _token: string,
    _pricePerUnit: BigNumberish,
    _onlyERC20: boolean,
    _platformFee: BigNumberish,
    _lootPerUnit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,uint256,bool,uint256,uint256)"(
    _baal: string,
    _token: string,
    _pricePerUnit: BigNumberish,
    _onlyERC20: boolean,
    _platformFee: BigNumberish,
    _lootPerUnit: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initTemplate(overrides?: Overrides): Promise<ContractTransaction>;

  "initTemplate()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  lootPerUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "lootPerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  onboarder(overrides?: PayableOverrides): Promise<ContractTransaction>;

  "onboarder()"(overrides?: PayableOverrides): Promise<ContractTransaction>;

  onboarder20(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onboarder20(uint256)"(
    _value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onlyERC20(overrides?: CallOverrides): Promise<boolean>;

  "onlyERC20()"(overrides?: CallOverrides): Promise<boolean>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  "platformFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  pricePerUnit(overrides?: CallOverrides): Promise<BigNumber>;

  "pricePerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baal(overrides?: CallOverrides): Promise<string>;

    "baal()"(overrides?: CallOverrides): Promise<string>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,uint256,bool,uint256,uint256)"(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initTemplate(overrides?: CallOverrides): Promise<void>;

    "initTemplate()"(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    lootPerUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "lootPerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(overrides?: CallOverrides): Promise<void>;

    "onboarder()"(overrides?: CallOverrides): Promise<void>;

    onboarder20(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "onboarder20(uint256)"(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyERC20(overrides?: CallOverrides): Promise<boolean>;

    "onlyERC20()"(overrides?: CallOverrides): Promise<boolean>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    "platformFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "pricePerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    YeetReceived(
      contributorAddress: string | null,
      amount: null,
      baal: null,
      lootToGive: null,
      lootToPlatform: null
    ): EventFilter;
  };

  estimateGas: {
    baal(overrides?: CallOverrides): Promise<BigNumber>;

    "baal()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    deposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,uint256,bool,uint256,uint256)"(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initTemplate(overrides?: Overrides): Promise<BigNumber>;

    "initTemplate()"(overrides?: Overrides): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    lootPerUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "lootPerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    onboarder(overrides?: PayableOverrides): Promise<BigNumber>;

    "onboarder()"(overrides?: PayableOverrides): Promise<BigNumber>;

    onboarder20(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onboarder20(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onlyERC20(overrides?: CallOverrides): Promise<BigNumber>;

    "onlyERC20()"(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    "platformFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerUnit(overrides?: CallOverrides): Promise<BigNumber>;

    "pricePerUnit()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baal()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposits(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,uint256,bool,uint256,uint256)"(
      _baal: string,
      _token: string,
      _pricePerUnit: BigNumberish,
      _onlyERC20: boolean,
      _platformFee: BigNumberish,
      _lootPerUnit: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initTemplate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initTemplate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootPerUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lootPerUnit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onboarder(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    "onboarder()"(overrides?: PayableOverrides): Promise<PopulatedTransaction>;

    onboarder20(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onboarder20(uint256)"(
      _value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onlyERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "onlyERC20()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "platformFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pricePerUnit()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
