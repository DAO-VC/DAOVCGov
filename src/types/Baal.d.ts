/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BaalInterface extends ethers.utils.Interface {
  functions: {
    "adminLock()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "avatar()": FunctionFragment;
    "burnLoot(address[],uint256[])": FunctionFragment;
    "burnShares(address[],uint256[])": FunctionFragment;
    "cancelProposal(uint32)": FunctionFragment;
    "encodeMultisend(bytes[],address)": FunctionFragment;
    "executeAsBaal(address,uint256,bytes)": FunctionFragment;
    "getCurrentVotes(address)": FunctionFragment;
    "getGuard()": FunctionFragment;
    "getPriorVotes(address,uint256)": FunctionFragment;
    "getProposalStatus(uint32)": FunctionFragment;
    "governorLock()": FunctionFragment;
    "gracePeriod()": FunctionFragment;
    "guard()": FunctionFragment;
    "hashOperation(bytes)": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "isGovernor(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "latestSponsoredProposalId()": FunctionFragment;
    "lockAdmin()": FunctionFragment;
    "lockGovernor()": FunctionFragment;
    "lockManager()": FunctionFragment;
    "lootPaused()": FunctionFragment;
    "lootToken()": FunctionFragment;
    "managerLock()": FunctionFragment;
    "memberVoted(address,uint32)": FunctionFragment;
    "minRetentionPercent()": FunctionFragment;
    "mintLoot(address[],uint256[])": FunctionFragment;
    "mintShares(address[],uint256[])": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "optionalLootCut()": FunctionFragment;
    "optionalLootReceiver()": FunctionFragment;
    "optionalSusReceiver()": FunctionFragment;
    "owner()": FunctionFragment;
    "processProposal(uint32,bytes)": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposalOffering()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorumPercent()": FunctionFragment;
    "ragequit(address,uint256,uint256,address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdminConfig(bool,bool)": FunctionFragment;
    "setAvatar(address)": FunctionFragment;
    "setGovernanceConfig(bytes)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setShamans(address[],uint256[])": FunctionFragment;
    "setTarget(address)": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "shamans(address)": FunctionFragment;
    "sharesPaused()": FunctionFragment;
    "sharesToken()": FunctionFragment;
    "sponsorProposal(uint32)": FunctionFragment;
    "sponsorThreshold()": FunctionFragment;
    "state(uint32)": FunctionFragment;
    "submitProposal(bytes,uint32,uint256,string)": FunctionFragment;
    "submitVote(uint32,bool)": FunctionFragment;
    "submitVoteWithSig(uint32,bool,bytes)": FunctionFragment;
    "target()": FunctionFragment;
    "totalLoot()": FunctionFragment;
    "totalShares()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adminLock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "avatar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burnLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeMultisend",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAsBaal",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentVotes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPriorVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governorLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "guard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "isGovernor", values: [string]): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "latestSponsoredProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lootPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lootToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "managerLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "memberVoted",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minRetentionPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintLoot",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintShares",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "optionalLootCut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionalLootReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionalSusReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processProposal",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalOffering",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ragequit",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdminConfig",
    values: [boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setAvatar", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setGovernanceConfig",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setShamans",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setTarget", values: [string]): string;
  encodeFunctionData(functionFragment: "setUp", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "shamans", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharesPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "submitProposal",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVoteWithSig",
    values: [BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "target", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "adminLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "avatar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeMultisend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeAsBaal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPriorVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governorLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "guard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGovernor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestSponsoredProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lootPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lootToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "memberVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRetentionPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionalLootCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionalLootReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionalSusReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalOffering",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ragequit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAdminConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAvatar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernanceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setShamans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shamans", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "target", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AvatarSet(address,address)": EventFragment;
    "CancelProposal(uint256)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "GovernanceConfigSet(uint32,uint32,uint256,uint256,uint256,uint256,address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LootPaused(bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProcessProposal(uint256,bool,bool)": EventFragment;
    "Ragequit(address,address,uint256,uint256,address[])": EventFragment;
    "SetupComplete(bool,bool,uint32,uint32,uint256,uint256,uint256,uint256,string,string,uint256,uint256)": EventFragment;
    "ShamanSet(address,uint256)": EventFragment;
    "SharesPaused(bool)": EventFragment;
    "SponsorProposal(address,uint256,uint256)": EventFragment;
    "SubmitProposal(uint256,bytes32,uint256,bytes,uint256,uint256,bool,uint256,string)": EventFragment;
    "SubmitVote(address,uint256,uint256,bool)": EventFragment;
    "TargetSet(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AvatarSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernanceConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LootPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ragequit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupComplete"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShamanSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TargetSet"): EventFragment;
}

export class Baal extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BaalInterface;

  functions: {
    adminLock(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "adminLock()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    avatar(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "avatar()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnLoot(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burnShares(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelProposal(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    encodeMultisend(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<{
      encodedMultisend: string;
      0: string;
    }>;

    "encodeMultisend(bytes[],address)"(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<{
      encodedMultisend: string;
      0: string;
    }>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeAsBaal(address,uint256,bytes)"(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    getGuard(overrides?: CallOverrides): Promise<{
      _guard: string;
      0: string;
    }>;

    "getGuard()"(overrides?: CallOverrides): Promise<{
      _guard: string;
      0: string;
    }>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      votes: BigNumber;
      0: BigNumber;
    }>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean];
    }>;

    "getProposalStatus(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [boolean, boolean, boolean, boolean];
    }>;

    governorLock(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "governorLock()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    gracePeriod(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    guard(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "guard()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "hashOperation(bytes)"(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    isAdmin(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isAdmin(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isGovernor(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isGovernor(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isManager(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isManager(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "latestSponsoredProposalId()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    lockAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "lockAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

    lockGovernor(overrides?: Overrides): Promise<ContractTransaction>;

    "lockGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

    lockManager(overrides?: Overrides): Promise<ContractTransaction>;

    "lockManager()"(overrides?: Overrides): Promise<ContractTransaction>;

    lootPaused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "lootPaused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    lootToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "lootToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    managerLock(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "managerLock()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "memberVoted(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    minRetentionPercent(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minRetentionPercent()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintShares(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    optionalLootCut(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "optionalLootCut()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    optionalLootReceiver(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionalLootReceiver()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    optionalSusReceiver(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "optionalSusReceiver()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processProposal(uint32,bytes)"(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "proposalCount()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    proposalOffering(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "proposalOffering()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: number;
      prevProposalId: number;
      votingStarts: number;
      votingEnds: number;
      graceEnds: number;
      expiration: number;
      baalGas: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      sponsor: string;
      proposalDataHash: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: number;
      prevProposalId: number;
      votingStarts: number;
      votingEnds: number;
      graceEnds: number;
      expiration: number;
      baalGas: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      sponsor: string;
      proposalDataHash: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
    }>;

    quorumPercent(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "quorumPercent()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "ragequit(address,uint256,uint256,address[])"(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdminConfig(bool,bool)"(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGovernanceConfig(bytes)"(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setShamans(address[],uint256[])"(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shamans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    sharesPaused(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<{
      0: boolean;
    }>;

    sharesToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "sharesToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sponsorProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sponsorThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "sponsorThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    state(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "submitProposal(bytes,uint32,uint256,string)"(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVote(uint32,bool)"(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "submitVoteWithSig(uint32,bool,bytes)"(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    target(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "target()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    totalLoot(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalLoot()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalShares(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalShares()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    totalSupply(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;
  };

  adminLock(overrides?: CallOverrides): Promise<boolean>;

  "adminLock()"(overrides?: CallOverrides): Promise<boolean>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  avatar(overrides?: CallOverrides): Promise<string>;

  "avatar()"(overrides?: CallOverrides): Promise<string>;

  burnLoot(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnLoot(address[],uint256[])"(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  burnShares(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burnShares(address[],uint256[])"(
    from: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelProposal(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelProposal(uint32)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  encodeMultisend(
    _calls: BytesLike[],
    _target: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeMultisend(bytes[],address)"(
    _calls: BytesLike[],
    _target: string,
    overrides?: CallOverrides
  ): Promise<string>;

  executeAsBaal(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeAsBaal(address,uint256,bytes)"(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCurrentVotes(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getCurrentVotes(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGuard(overrides?: CallOverrides): Promise<string>;

  "getGuard()"(overrides?: CallOverrides): Promise<string>;

  getPriorVotes(
    account: string,
    timeStamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriorVotes(address,uint256)"(
    account: string,
    timeStamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProposalStatus(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean]>;

  "getProposalStatus(uint32)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean, boolean, boolean]>;

  governorLock(overrides?: CallOverrides): Promise<boolean>;

  "governorLock()"(overrides?: CallOverrides): Promise<boolean>;

  gracePeriod(overrides?: CallOverrides): Promise<number>;

  "gracePeriod()"(overrides?: CallOverrides): Promise<number>;

  guard(overrides?: CallOverrides): Promise<string>;

  "guard()"(overrides?: CallOverrides): Promise<string>;

  hashOperation(
    _transactions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOperation(bytes)"(
    _transactions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isAdmin(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  "isAdmin(address)"(
    shaman: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGovernor(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  "isGovernor(address)"(
    shaman: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isManager(shaman: string, overrides?: CallOverrides): Promise<boolean>;

  "isManager(address)"(
    shaman: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;

  "latestSponsoredProposalId()"(overrides?: CallOverrides): Promise<number>;

  lockAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "lockAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  lockGovernor(overrides?: Overrides): Promise<ContractTransaction>;

  "lockGovernor()"(overrides?: Overrides): Promise<ContractTransaction>;

  lockManager(overrides?: Overrides): Promise<ContractTransaction>;

  "lockManager()"(overrides?: Overrides): Promise<ContractTransaction>;

  lootPaused(overrides?: CallOverrides): Promise<boolean>;

  "lootPaused()"(overrides?: CallOverrides): Promise<boolean>;

  lootToken(overrides?: CallOverrides): Promise<string>;

  "lootToken()"(overrides?: CallOverrides): Promise<string>;

  managerLock(overrides?: CallOverrides): Promise<boolean>;

  "managerLock()"(overrides?: CallOverrides): Promise<boolean>;

  memberVoted(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "memberVoted(address,uint32)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "minRetentionPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintLoot(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintLoot(address[],uint256[])"(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintShares(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintShares(address[],uint256[])"(
    to: string[],
    amount: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optionalLootCut(overrides?: CallOverrides): Promise<BigNumber>;

  "optionalLootCut()"(overrides?: CallOverrides): Promise<BigNumber>;

  optionalLootReceiver(overrides?: CallOverrides): Promise<string>;

  "optionalLootReceiver()"(overrides?: CallOverrides): Promise<string>;

  optionalSusReceiver(overrides?: CallOverrides): Promise<string>;

  "optionalSusReceiver()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  processProposal(
    id: BigNumberish,
    proposalData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processProposal(uint32,bytes)"(
    id: BigNumberish,
    proposalData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  proposalCount(overrides?: CallOverrides): Promise<number>;

  "proposalCount()"(overrides?: CallOverrides): Promise<number>;

  proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalOffering()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: number;
    prevProposalId: number;
    votingStarts: number;
    votingEnds: number;
    graceEnds: number;
    expiration: number;
    baalGas: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    maxTotalSharesAndLootAtYesVote: BigNumber;
    sponsor: string;
    proposalDataHash: string;
    details: string;
    0: number;
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: number;
    prevProposalId: number;
    votingStarts: number;
    votingEnds: number;
    graceEnds: number;
    expiration: number;
    baalGas: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    maxTotalSharesAndLootAtYesVote: BigNumber;
    sponsor: string;
    proposalDataHash: string;
    details: string;
    0: number;
    1: number;
    2: number;
    3: number;
    4: number;
    5: number;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: string;
    11: string;
    12: string;
  }>;

  quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "quorumPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  ragequit(
    to: string,
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "ragequit(address,uint256,uint256,address[])"(
    to: string,
    sharesToBurn: BigNumberish,
    lootToBurn: BigNumberish,
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAdminConfig(
    pauseShares: boolean,
    pauseLoot: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdminConfig(bool,bool)"(
    pauseShares: boolean,
    pauseLoot: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAvatar(
    _avatar: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAvatar(address)"(
    _avatar: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGovernanceConfig(
    _governanceConfig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGovernanceConfig(bytes)"(
    _governanceConfig: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGuard(_guard: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGuard(address)"(
    _guard: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setShamans(
    _shamans: string[],
    _permissions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setShamans(address[],uint256[])"(
    _shamans: string[],
    _permissions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTarget(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTarget(address)"(
    _target: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUp(
    _initializationParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUp(bytes)"(
    _initializationParams: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "shamans(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sharesPaused(overrides?: CallOverrides): Promise<boolean>;

  "sharesPaused()"(overrides?: CallOverrides): Promise<boolean>;

  sharesToken(overrides?: CallOverrides): Promise<string>;

  "sharesToken()"(overrides?: CallOverrides): Promise<string>;

  sponsorProposal(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sponsorProposal(uint32)"(
    id: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "sponsorThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  state(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint32)"(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

  submitProposal(
    proposalData: BytesLike,
    expiration: BigNumberish,
    baalGas: BigNumberish,
    details: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "submitProposal(bytes,uint32,uint256,string)"(
    proposalData: BytesLike,
    expiration: BigNumberish,
    baalGas: BigNumberish,
    details: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  submitVote(
    id: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVote(uint32,bool)"(
    id: BigNumberish,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  submitVoteWithSig(
    id: BigNumberish,
    approved: boolean,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "submitVoteWithSig(uint32,bool,bytes)"(
    id: BigNumberish,
    approved: boolean,
    signature: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  target(overrides?: CallOverrides): Promise<string>;

  "target()"(overrides?: CallOverrides): Promise<string>;

  totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalShares(overrides?: CallOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<number>;

  "votingPeriod()"(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    adminLock(overrides?: CallOverrides): Promise<boolean>;

    "adminLock()"(overrides?: CallOverrides): Promise<boolean>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<string>;

    "avatar()"(overrides?: CallOverrides): Promise<string>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "burnLoot(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "burnShares(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancelProposal(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeMultisend(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeMultisend(bytes[],address)"(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<string>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeAsBaal(address,uint256,bytes)"(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<string>;

    "getGuard()"(overrides?: CallOverrides): Promise<string>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean]>;

    "getProposalStatus(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean, boolean, boolean]>;

    governorLock(overrides?: CallOverrides): Promise<boolean>;

    "governorLock()"(overrides?: CallOverrides): Promise<boolean>;

    gracePeriod(overrides?: CallOverrides): Promise<number>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<number>;

    guard(overrides?: CallOverrides): Promise<string>;

    "guard()"(overrides?: CallOverrides): Promise<string>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOperation(bytes)"(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isAdmin(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    "isAdmin(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGovernor(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    "isGovernor(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isManager(shaman: string, overrides?: CallOverrides): Promise<boolean>;

    "isManager(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<number>;

    "latestSponsoredProposalId()"(overrides?: CallOverrides): Promise<number>;

    lockAdmin(overrides?: CallOverrides): Promise<void>;

    "lockAdmin()"(overrides?: CallOverrides): Promise<void>;

    lockGovernor(overrides?: CallOverrides): Promise<void>;

    "lockGovernor()"(overrides?: CallOverrides): Promise<void>;

    lockManager(overrides?: CallOverrides): Promise<void>;

    "lockManager()"(overrides?: CallOverrides): Promise<void>;

    lootPaused(overrides?: CallOverrides): Promise<boolean>;

    "lootPaused()"(overrides?: CallOverrides): Promise<boolean>;

    lootToken(overrides?: CallOverrides): Promise<string>;

    "lootToken()"(overrides?: CallOverrides): Promise<string>;

    managerLock(overrides?: CallOverrides): Promise<boolean>;

    "managerLock()"(overrides?: CallOverrides): Promise<boolean>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "memberVoted(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "minRetentionPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mintShares(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionalLootCut(overrides?: CallOverrides): Promise<BigNumber>;

    "optionalLootCut()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionalLootReceiver(overrides?: CallOverrides): Promise<string>;

    "optionalLootReceiver()"(overrides?: CallOverrides): Promise<string>;

    optionalSusReceiver(overrides?: CallOverrides): Promise<string>;

    "optionalSusReceiver()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "processProposal(uint32,bytes)"(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    proposalCount(overrides?: CallOverrides): Promise<number>;

    "proposalCount()"(overrides?: CallOverrides): Promise<number>;

    proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalOffering()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: number;
      prevProposalId: number;
      votingStarts: number;
      votingEnds: number;
      graceEnds: number;
      expiration: number;
      baalGas: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      sponsor: string;
      proposalDataHash: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: number;
      prevProposalId: number;
      votingStarts: number;
      votingEnds: number;
      graceEnds: number;
      expiration: number;
      baalGas: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      maxTotalSharesAndLootAtYesVote: BigNumber;
      sponsor: string;
      proposalDataHash: string;
      details: string;
      0: number;
      1: number;
      2: number;
      3: number;
      4: number;
      5: number;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: string;
      11: string;
      12: string;
    }>;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "ragequit(address,uint256,uint256,address[])"(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAdminConfig(bool,bool)"(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setAvatar(_avatar: string, overrides?: CallOverrides): Promise<void>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGovernanceConfig(bytes)"(
      _governanceConfig: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(_guard: string, overrides?: CallOverrides): Promise<void>;

    "setGuard(address)"(
      _guard: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setShamans(address[],uint256[])"(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setTarget(_target: string, overrides?: CallOverrides): Promise<void>;

    "setTarget(address)"(
      _target: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesPaused(overrides?: CallOverrides): Promise<boolean>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<boolean>;

    sharesToken(overrides?: CallOverrides): Promise<string>;

    "sharesToken()"(overrides?: CallOverrides): Promise<string>;

    sponsorProposal(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "sponsorProposal(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "sponsorThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(id: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "submitProposal(bytes,uint32,uint256,string)"(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVote(uint32,bool)"(
      id: BigNumberish,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "submitVoteWithSig(uint32,bool,bytes)"(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    target(overrides?: CallOverrides): Promise<string>;

    "target()"(overrides?: CallOverrides): Promise<string>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<number>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): EventFilter;

    AvatarSet(
      previousAvatar: string | null,
      newAvatar: string | null
    ): EventFilter;

    CancelProposal(proposal: BigNumberish | null): EventFilter;

    ChangedGuard(guard: null): EventFilter;

    GovernanceConfigSet(
      voting: null,
      grace: null,
      newOffering: null,
      quorum: null,
      sponsor: null,
      minRetention: null,
      susReceiver: null,
      lootReceiver: null,
      lootCut: null
    ): EventFilter;

    Initialized(version: null): EventFilter;

    LootPaused(paused: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ProcessProposal(
      proposal: BigNumberish | null,
      passed: null,
      actionFailed: null
    ): EventFilter;

    Ragequit(
      member: string | null,
      to: null,
      lootToBurn: BigNumberish | null,
      sharesToBurn: BigNumberish | null,
      tokens: null
    ): EventFilter;

    SetupComplete(
      lootPaused: null,
      sharesPaused: null,
      gracePeriod: null,
      votingPeriod: null,
      proposalOffering: null,
      quorumPercent: null,
      sponsorThreshold: null,
      minRetentionPercent: null,
      name: null,
      symbol: null,
      totalShares: null,
      totalLoot: null
    ): EventFilter;

    ShamanSet(shaman: string | null, permission: null): EventFilter;

    SharesPaused(paused: null): EventFilter;

    SponsorProposal(
      member: string | null,
      proposal: BigNumberish | null,
      votingStarts: BigNumberish | null
    ): EventFilter;

    SubmitProposal(
      proposal: BigNumberish | null,
      proposalDataHash: BytesLike | null,
      votingPeriod: null,
      proposalData: null,
      expiration: null,
      baalGas: null,
      selfSponsor: null,
      timestamp: null,
      details: null
    ): EventFilter;

    SubmitVote(
      member: string | null,
      balance: null,
      proposal: BigNumberish | null,
      approved: boolean | null
    ): EventFilter;

    TargetSet(
      previousTarget: string | null,
      newTarget: string | null
    ): EventFilter;
  };

  estimateGas: {
    adminLock(overrides?: CallOverrides): Promise<BigNumber>;

    "adminLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avatar(overrides?: CallOverrides): Promise<BigNumber>;

    "avatar()"(overrides?: CallOverrides): Promise<BigNumber>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnLoot(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burnShares(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelProposal(id: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancelProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    encodeMultisend(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeMultisend(bytes[],address)"(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeAsBaal(address,uint256,bytes)"(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGuard(overrides?: CallOverrides): Promise<BigNumber>;

    "getGuard()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposalStatus(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governorLock(overrides?: CallOverrides): Promise<BigNumber>;

    "governorLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    gracePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    guard(overrides?: CallOverrides): Promise<BigNumber>;

    "guard()"(overrides?: CallOverrides): Promise<BigNumber>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOperation(bytes)"(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAdmin(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isAdmin(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGovernor(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isGovernor(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isManager(shaman: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isManager(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestSponsoredProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "latestSponsoredProposalId()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockAdmin(overrides?: Overrides): Promise<BigNumber>;

    "lockAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    lockGovernor(overrides?: Overrides): Promise<BigNumber>;

    "lockGovernor()"(overrides?: Overrides): Promise<BigNumber>;

    lockManager(overrides?: Overrides): Promise<BigNumber>;

    "lockManager()"(overrides?: Overrides): Promise<BigNumber>;

    lootPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "lootPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    lootToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lootToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    managerLock(overrides?: CallOverrides): Promise<BigNumber>;

    "managerLock()"(overrides?: CallOverrides): Promise<BigNumber>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "memberVoted(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetentionPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "minRetentionPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintShares(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionalLootCut(overrides?: CallOverrides): Promise<BigNumber>;

    "optionalLootCut()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionalLootReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "optionalLootReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionalSusReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    "optionalSusReceiver()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processProposal(uint32,bytes)"(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposalOffering(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalOffering()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "quorumPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "ragequit(address,uint256,uint256,address[])"(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAdminConfig(bool,bool)"(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAvatar(_avatar: string, overrides?: Overrides): Promise<BigNumber>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGovernanceConfig(bytes)"(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGuard(_guard: string, overrides?: Overrides): Promise<BigNumber>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setShamans(address[],uint256[])"(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTarget(_target: string, overrides?: Overrides): Promise<BigNumber>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shamans(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    sharesToken(overrides?: CallOverrides): Promise<BigNumber>;

    "sharesToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sponsorProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sponsorThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "sponsorThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    state(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "state(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "submitProposal(bytes,uint32,uint256,string)"(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVote(uint32,bool)"(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "submitVoteWithSig(uint32,bool,bytes)"(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    target(overrides?: CallOverrides): Promise<BigNumber>;

    "target()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLoot(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalShares(overrides?: CallOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adminLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avatar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "avatar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnLoot(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnLoot(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    burnShares(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burnShares(address[],uint256[])"(
      from: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    encodeMultisend(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeMultisend(bytes[],address)"(
      _calls: BytesLike[],
      _target: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeAsBaal(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeAsBaal(address,uint256,bytes)"(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCurrentVotes(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentVotes(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGuard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriorVotes(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriorVotes(address,uint256)"(
      account: string,
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposalStatus(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governorLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governorLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gracePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gracePeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guard()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashOperation(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOperation(bytes)"(
      _transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAdmin(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAdmin(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovernor(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGovernor(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isManager(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isManager(address)"(
      shaman: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestSponsoredProposalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestSponsoredProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "lockAdmin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lockGovernor(overrides?: Overrides): Promise<PopulatedTransaction>;

    "lockGovernor()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lockManager(overrides?: Overrides): Promise<PopulatedTransaction>;

    "lockManager()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lootPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lootPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lootToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lootToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    managerLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "managerLock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    memberVoted(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "memberVoted(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRetentionPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minRetentionPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintLoot(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintLoot(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintShares(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintShares(address[],uint256[])"(
      to: string[],
      amount: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionalLootCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionalLootCut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionalLootReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionalLootReceiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionalSusReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionalSusReceiver()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processProposal(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processProposal(uint32,bytes)"(
      id: BigNumberish,
      proposalData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalOffering(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "proposalOffering()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumPercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quorumPercent()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ragequit(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "ragequit(address,uint256,uint256,address[])"(
      to: string,
      sharesToBurn: BigNumberish,
      lootToBurn: BigNumberish,
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAdminConfig(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdminConfig(bool,bool)"(
      pauseShares: boolean,
      pauseLoot: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAvatar(
      _avatar: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAvatar(address)"(
      _avatar: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGovernanceConfig(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGovernanceConfig(bytes)"(
      _governanceConfig: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGuard(
      _guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGuard(address)"(
      _guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setShamans(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setShamans(address[],uint256[])"(
      _shamans: string[],
      _permissions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTarget(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTarget(address)"(
      _target: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUp(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUp(bytes)"(
      _initializationParams: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shamans(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shamans(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharesPaused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sharesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sharesToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sponsorProposal(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sponsorProposal(uint32)"(
      id: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sponsorThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sponsorThreshold()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    state(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint32)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitProposal(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "submitProposal(bytes,uint32,uint256,string)"(
      proposalData: BytesLike,
      expiration: BigNumberish,
      baalGas: BigNumberish,
      details: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    submitVote(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVote(uint32,bool)"(
      id: BigNumberish,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    submitVoteWithSig(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "submitVoteWithSig(uint32,bool,bytes)"(
      id: BigNumberish,
      approved: boolean,
      signature: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    target(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "target()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLoot()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalShares()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "votingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
